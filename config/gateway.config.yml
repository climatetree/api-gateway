http:
  port: 8080
admin:
  port: 9876
  host: localhost
apiEndpoints:
  stories:
    host: '*'
    paths: ['/stories/place/:placeId', '/stories/title/:keyword']
  storiesVerified:
    host: '*'
    paths: ['/stories/story/comment','/stories/create','/stories/:storyID/like/:userID', '/stories/:storyID/unlike/:userID']
  places:
    host: '*'
    paths: ['/places/:placeName', '/places/:placeId/similar', '/places/:placeId/similar/advanced']
  users:
    host: '*'
    paths: ['/login']
serviceEndpoints:
  storiesService:
    url: 'https://backend-mongo-stories.azurewebsites.net'
  storiesVerifiedService:
    url: 'https://backend-mongo-stories.azurewebsites.net'
  placesService:
    url: 'https://places-postgres2.azurewebsites.net/api'
  userService:
    url: 'https://user-microservice-demo.herokuapp.com'
policies:
  - basic-auth
  - cors
  - expression
  - key-auth
  - log
  - oauth2
  - proxy
  - rate-limit
  - jwt
pipelines:
  - name: storiesVerified
    apiEndpoints:
      - storiesVerified
    policies:
      - jwt:
          - action:
              checkCredentialExistence: false
              secretOrPublicKey: ${ASD_KEY}
      - proxy:
          - action:
              serviceEndpoint: storiesVerifiedService 
              changeOrigin: true
      - log: # policy name
        - action:    # array of condition/actions objects
            message: ${req.method} ${req.originalUrl} 
  - name: stories
    apiEndpoints:
      - stories
    policies:
      - proxy:
          - action:
              serviceEndpoint: storiesService 
              changeOrigin: true
      - log: # policy name
        - action:    # array of condition/actions objects
            message: ${req.method} ${req.originalUrl}          
  - name: places
    apiEndpoints:
      - places
    policies:
      - proxy:
          - action:
              serviceEndpoint: placesService 
              changeOrigin: true
      - log: # policy name
          - action:    # array of condition/actions objects
              message: ${req.method} ${req.originalUrl} 
  - name: users
    apiEndpoints:
      - users
    policies:
      #- cors:
      #    - action:
      #        origin: '*'
      #        methods: 'HEAD,PUT,PATCH,POST,DELETE'
      #        allowedHeaders: 'application/json'
      - proxy:
          - action:
              serviceEndpoint: userService 
              changeOrigin: true
      - log: # policy name
        - action:    # array of condition/actions objects
            message: ${req.method} ${req.originalUrl}
