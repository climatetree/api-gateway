http:
  port: 8080
admin:
  port: 9876
  host: localhost
apiEndpoints:
  stories:
    host: '*'
    paths: ['/v1/stories/place/:placeId',
    '/v1/stories/title/:keyword',
    '/v1/stories/topStories/:numberOfStories',
    '/v1/stories',
    '/v1/stories/taxonomy',
    '/v1/stories/taxonomy/solution/:solution',
    '/v1/stories/taxonomy/strategy/:strategy',
    '/v1/stories/taxonomy/sector/:sector',
    '/v1/stories/getPreview',
    '/v1/stories/sector/:sector',
    '/v1/stories/solution/:solution',
    '/v1/stories/strategy/:strategy']
  storiesVerified:
    host: '*'
    paths: ['/v1/stories/story/comment',
    '/v1/stories/delete/:storyId',
    '/v1/stories/create',
    '/v1/stories/:storyID/like/:userID', 
    '/v1/stories/:storyID/unlike/:userID',
    '/v1/stories/unrated',
    '/v1/stories/description/:description',
    '/v1/stories/:storyID/flag/:userID',
    '/v1/stories/:storyID/unflag/:userID',
    '/v1/stories/rating/update']
  places:
    host: '*'
    paths: ['/places/v1/:placeName', '/places/v1/:placeId/similar', '/places/v1/:placeId/similar/advanced','/places/v1/nearest']
  users:
    host: '*'
    paths: ['/user/login']
  usersVerified:
    host: '*'
    paths: ['/user/searchname',
    '/user/:userId',
    '/user/:userId/:roleId',
    '/user/blacklist/:userId',
    '/user/unblacklist/:userId',
    '/user/request_role_change/:userId/:roleChangeId', 
    '/user/get_all_role_update_requests']
  geoserver:
    host: '*'
    paths: ['/geoserver/wfs']
serviceEndpoints:
  storiesService:
    url: 'https://backend-mongo-stories.azurewebsites.net'
  storiesVerifiedService:
    url: 'https://backend-mongo-stories.azurewebsites.net'
  placesService:
    url: 'https://places-postgres2.azurewebsites.net/api'
  userService:
    url: 'https://usermicroservice-climatetree.azurewebsites.net'
  userVerifiedService:
    url: 'https://usermicroservice-climatetree.azurewebsites.net'
  geoserverService:
    url: 'https://climatetree-geoserver.azurewebsites.net'
policies:
  - basic-auth
  - cors
  - expression
  - key-auth
  - log
  - oauth2
  - proxy
  - rate-limit
  - jwt
pipelines:
  - name: storiesVerified
    apiEndpoints:
      - storiesVerified
    policies:
      - cors:
          - action:
              origin: '*'
              methods: 'HEAD,PUT,PATCH,POST,DELETE'
      - jwt:
          - action:
              checkCredentialExistence: false
              secretOrPublicKey: ${ASD_KEY}
      - proxy:
          - action:
              serviceEndpoint: storiesVerifiedService 
              changeOrigin: true
      - log: # policy name
        - action:    # array of condition/actions objects
            message: ${req.method} ${req.originalUrl} 
  - name: stories
    apiEndpoints:
      - stories
    policies:
      - cors:
          - action:
              origin: '*'
              methods: 'HEAD,PUT,PATCH,POST,DELETE'
      - proxy:
          - action:
              serviceEndpoint: storiesService 
              changeOrigin: true
      - log: # policy name
        - action:    # array of condition/actions objects
            message: ${req.method} ${req.originalUrl}          
  - name: places
    apiEndpoints:
      - places
    policies:
      - cors:
          - action:
              origin: '*'
              methods: 'HEAD,PUT,PATCH,POST,DELETE'
      - proxy:
          - action:
              serviceEndpoint: placesService 
              changeOrigin: true
      - log: # policy name
          - action:    # array of condition/actions objects
              message: ${req.method} ${req.originalUrl} 
  - name: users
    apiEndpoints:
      - users
    policies:
      - cors:
          - action:
              origin: '*'
              methods: 'HEAD,PUT,PATCH,POST,DELETE'
      - proxy:
          - action:
              serviceEndpoint: userService 
              changeOrigin: true
      - log: # policy name
        - action:    # array of condition/actions objects
            message: ${req.method} ${req.originalUrl}
  - name: usersVerified
    apiEndpoints:
      - usersVerified
    policies:
      - cors:
          - action:
              origin: '*'
              methods: 'HEAD,PUT,PATCH,POST,DELETE'
      - jwt:
          - action:
              checkCredentialExistence: false
              secretOrPublicKey: ${ASD_KEY}        
      - proxy:
          - action:
              serviceEndpoint: userVerifiedService 
              changeOrigin: true
      - log: # policy name
        - action:    # array of condition/actions objects
            message: ${req.method} ${req.originalUrl}
  - name: geoserver
    apiEndpoints:
      - geoserver
    policies:
      - cors:
          - action:
              origin: '*'
              methods: 'HEAD,PUT,PATCH,POST,DELETE'
      - proxy:
          - action:
              serviceEndpoint: geoserverService 
              changeOrigin: true
      - log: # policy name
        - action:    # array of condition/actions objects
            message: ${req.method} ${req.originalUrl}
